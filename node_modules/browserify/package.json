{
  "name": "browserify",
  "version": "1.10.4",
  "description": "Browser-side require() for js directories and npm modules",
  "main": "index.js",
  "bin": {
    "browserify": "bin/cli.js"
  },
  "directories": {
    "example": "example",
    "test": "test"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/substack/node-browserify.git"
  },
  "keywords": [
    "browser",
    "require",
    "middleware",
    "bundle",
    "npm",
    "coffee",
    "javascript"
  ],
  "dependencies": {
    "detective": "~0.1.0",
    "deputy": "0.0.x",
    "resolve": "~0.2.0",
    "nub": "0.0.x",
    "commondir": "0.0.x",
    "coffee-script": "~1.1.1",
    "optimist": "~0.2.6",
    "http-browserify": "~0.1.1",
    "vm-browserify": "~0.0.0"
  },
  "devDependencies": {
    "tap": "0.2.x",
    "connect": "1.8.5",
    "hashish": ">=0.0.2 <0.1",
    "traverse": ">=0.3.8 <0.4",
    "backbone": ">=0.3.3",
    "dnode": ">=0.7.1 <0.8",
    "jade": "0.20.0",
    "seq": "0.3.3",
    "jquery-browserify": "*",
    "lazy": "1.0.x",
    "ecstatic": "~0.1.4"
  },
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "scripts": {
    "test": "node node_modules/tap/bin/tap.js test/*.js"
  },
  "license": "MIT/X11",
  "engine": {
    "node": ">=0.4.0"
  },
  "readme": "Browserify\n==========\n\nMake node-style require() work in the browser, as if by magic!\n\n[![build status](https://secure.travis-ci.org/substack/node-browserify.png)](http://travis-ci.org/substack/node-browserify)\n\nBrowserify generates a single static bundle that you can drop into your\napplication with a single `<script>` tag. You can use browserify with any kind\nof web stack that can host up static files.\n\n![browserify!](http://substack.net/images/browserify/browserify.png)\n\nJust write an `entry.js` to start with some `require()`s in it:\n\n````javascript\nvar foo = require('./foo');\n\nwindow.onload = function () {\n    document.getElementById('result').innerHTML = foo(100);\n};\n````\n\nand then a `foo.js`:\n\n````javascript\nvar bar = require('./bar');\n\nmodule.exports = function (x) {\n    return x * bar.coeff(x) + (x * 3 - 2)\n};\n````\n\nand then a `bar.js`:\n\n````javascript\nexports.coeff = function (x) {\n    return Math.log(x) / Math.log(2) + 1;\n};\n````\n\nNow you need to build this. You can either:\n\n1. use the browserify CLI tool\n2. use the middleware\n3. use the API\n\nusing the CLI tool\n------------------\n\n````\nbrowserify entry.js -o browserify.js\n````\n\nThen just throw a `<script src=\"/browserify.js\"></script>` into your HTML!\n\nusing the middleware\n--------------------\n\n````javascript\nvar express = require('express');\nvar app = express.createServer();\napp.listen(8080);\n\nvar bundle = require('browserify')(__dirname + '/entry.js');\napp.use(bundle);\n````\n\nThen just throw a `<script src=\"/browserify.js\"></script>` into your HTML!\n\nusing the API\n-------------\n\nSee below.\n\nfeatures at a glance\n====================\n\n* use [npm](http://npmjs.org) modules in the browser\n\n* `require()`s work browser-side just as they do in node\n\n* coffee script just works™ — just require('./beans.coffee') or whichever\n\n* lots of node builtins just work™:\n\n    > * require('events')\n    > * require('path')\n    > * require('vm')\n    > * require('http')\n    > * require('assert')\n    > * require('url')\n    > * require('buffer')\n    > * require('util')\n    > * require('querystring')\n\n* lots of ways to compile\n\n* watch mode automatically recompiles your bundle when files change\n\n* debug mode for real line numbers (just subtract 2)\n\ncommand-line usage\n==================\n\n````\nUsage: node ./bin/cli.js [entry files] {OPTIONS}\n\nOptions:\n  --outfile, -o  Write the browserify bundle to this file.\n                 If unspecified, browserify prints to stdout.                   \n  --require, -r  A module name or file to bundle.require()\n                 Optionally use a colon separator to set the target.            \n  --entry, -e    An entry point of your app                                     \n  --ignore, -i   Ignore a file                                                  \n  --alias, -a    Register an alias with a colon separator: \"to:from\"\n                 Example: --alias 'jquery:jquery-browserify'                    \n  --cache, -c    Turn on caching at $HOME/.config/browserling/cache.json or use\n                 a file for caching.\n                                                                 [default: true]\n  --debug, -d    Switch on debugging mode with //@ sourceURL=...s.     [boolean]\n  --plugin, -p   Use a plugin. Use a colon separator to specify additional\n                 plugin arguments as a JSON string.\n                 Example: --plugin 'fileify:[\"files\",\".\"]'                      \n  --prelude      Include the code that defines require() in this bundle.\n                                                      [boolean]  [default: true]\n  --watch, -w    Watch for changes. The script will stay open and write updates\n                 to the output every time any of the bundled files change.\n                 This option only works in tandem with -o.                      \n  --verbose, -v  Write out how many bytes were written in -o mode. This is\n                 especially useful with --watch.                                \n  --help, -h     Show this message                                              \n\n````\n\nmethods\n=======\n\n````javascript\nvar browserify = require('browserify');\n````\n\nvar b = browserify(opts={})\n---------------------------\n\nReturn a middleware with attached methods that will host up a browserified\nscript at `opts.mount` or `\"/browserify.js\"` if unspecified.\n\n`opts` may also contain these fields:\n\n* require - calls `b.require()`\n* ignore - calls `b.ignore()`\n* entry - calls `b.addEntry()`\n* filter - registers a \"post\" extension using `b.register()`\n* watch - set watches on files, see below\n* cache - turn on caching for AST traversals, see below\n* debug - turn on source mapping for debugging with `//@ sourceURL=...`\nin browsers that support it\n\nIf `opts` is a string, it is interpreted as a `require` value.\n\nAny query string after `opts.mount` will be ignored.\n\n### watch :: Boolean or Object\n\nSet watches on files and automatically rebundle when a file changes.\n\nThis option defaults to false. If `opts.watch` is set to true, default watch\narguments are assumed or you can pass in an object to pass along as the second\nparameter to `fs.watchFile()`.\n\n### cache :: Boolean or String\n\nIf `cache` is a boolean, turn on caching at\n`$HOME/.config/browserify/cache.json`.\n\nIf `cache` is a string, turn on caching at the filename specified by `cache`.\n\n### bundle events\n\n`b` bundles will also emit events.\n\n#### 'syntaxError', err\n\nThis event gets emitted when there is a syntax error somewhere in the build\nprocess. If you don't listen for this event, the error will be printed to\nstderr.\n\n#### 'bundle'\n\nIn watch mode, this event is emitted when a new bundle has been generated.\n\nb.bundle()\n----------\n\nReturn the bundled source as a string.\n\nb.require(file)\n---------------\n\nRequire a file or files for inclusion in the bundle.\n\nIf `file` is an array, require each element in it.\n\nIf `file` is a non-array object, map an alias to a package name.\nFor instance to be able to map `require('jquery')` to the jquery-browserify\npackage, you can do:\n\n````javascript\nb.require({ jquery : 'jquery-browserify' })\n````\n\nand the same thing in middleware-form:\n\n````javascript\nbrowserify({ require : { jquery : 'jquery-browserify' } })\n````\n\nTo mix alias objects with regular requires you could do:\n\n````javascript\nbrowserify({ require : [ 'seq', { jquery : 'jquery-browserify' }, 'traverse' ])\n````\n\nIn practice you won't need to `b.require()` very many files since all the\n`require()`s are read from each file that you require and automatically\nincluded.\n\nb.ignore(file)\n--------------\n\nOmit a file or files from being included by the AST walk to hunt down\n`require()` statements.\n\nb.addEntry(file)\n----------------\n\nAppend a file to the end of the bundle and execute it without having to\n`require()` it.\n\nSpecifying an entry point will let you `require()` other modules without having\nto load the entry point in a `<script>` tag yourself.\n\nIf entry is an Array, concatenate these files together and append to the end of\nthe bundle.\n\nb.filter(fn)\n------------\n\nTransform the source using the filter function `fn(src)`. The return value of\n`fn` should be the new source.\n\nb.register(ext, fn)\n-------------------\n\nRegister a handler to wrap extensions.\n\nWrap every file matching the extension `ext` with the function `fn`.\n\nFor every `file` included into the bundle `fn` gets called for matching file\ntypes as `fn.call(b, body, file)` for the bundle instance `b` and the file\ncontent string `body`. `fn` should return the new wrapped contents.\n\nIf `ext` is unspecified, execute the wrapper for every file.\n\nIf `ext` is 'post', execute the wrapper on the entire bundle.\n\nIf `ext` is 'pre', call the wrapper function with the bundle object before the\nsource is generated.\n\nIf `ext` is an object, pull the extension from `ext.extension` and the wrapper\nfunction `fn` from `ext.wrapper`. This makes it easy to write plugins like\n[fileify](https://github.com/substack/node-fileify).\n\nCoffee script support is just implemented internally as a `.register()`\nextension:\n\n````javascript\nb.register('.coffee', function (body) {\n    return coffee.compile(body);\n});\n````\n\nb.use(fn)\n---------\n\nUse a middleware plugin, `fn`. `fn` is called with the instance object `b`.\n\nb.prepend(content)\n------------------\n\nPrepend unwrapped content to the beginning of the bundle.\n\nb.append(content)\n-----------------\n\nAppend unwrapped content to the end of the bundle.\n\nb.alias(to, from)\n-----------------\n\nAlias a package name from another package name.\n\nb.modified\n----------\n\nContains a Date object with the time the bundle was last modified. This field is\nuseful in conjunction with the `watch` field described in the `browserify()` to\ngenerate unique `<script>` `src` values to force script reloading.\n\npackage.json\n============\n\nIn order to resolve main files for projects, the package.json \"main\" field is\nread.\n\nIf a package.json has a \"browserify\" field, you can override the standard \"main\"\nbehavior with something special just for browsers.\n\nThe \"browserify\" field can be a string that points to the browser-specific\n\"main\" file or it can be an object with a \"main\" field in it.\n\ncompatability\n=============\n\nprocess\n-------\n\nBrowserify exports a faux `process` object with these attributes:\n\n* nextTick(fn) - uses [the postMessage trick](http://dbaron.org/log/20100309-faster-timeouts)\n    for a faster `setTimeout(fn, 0)` if it can\n* title - set to 'browser' for browser code, 'node' in regular node code\n\nrequire('events')\n-----------------\n\nrequire('assert')\n-----------------\n\nrequire('url')\n--------------\n\nrequire('buffer')\n-----------------\n\nrequire('buffer_ieee754')\n-------------------------\n\nrequire('stream')\n-----------------\n\nrequire('vm')\n-------------\n\nAll the goodness of node's `require('vm')` has been emulated with iframe\ntrickery. This functionality is made available by the\n[vm-browserify](https://github.com/substack/vm-browserify) project.\n\nrequire('http')\n---------------\n\nImplement the client side of the node http api using the\n[http-browserify](https://github.com/substack/http-browserify) project.\n\nrequire('path')\n---------------\n\nThe posix functions from the `path` module have been included except for\n`exists()` and `existsSync()`. Just `require('path')`!\n\n__dirname\n---------\n\nThe faux directory name, scrubbed of true directory information so as not to\nexpose your filesystem organization.\n\n__filename\n----------\n\nThe faux file path, scrubbed of true path information so as not to expose your\nfilesystem organization.\n\nrecipes\n=======\n\nuse an npm module in the browser\n--------------------------------\n\nFirst install a module:\n\n    npm install traverse\n\nThen write an `entry.js`:\n\n````javascript\nvar traverse = require('traverse');\nvar obj = traverse({ a : 3, b : [ 4, 5 ] }).map(function (x) {\n    if (typeof x === 'number') this.update(x * 100)\n});\nconsole.dir(obj);\n````\n\nthen build it!\n\n    browserify entry.js -o bundle.js\n\nthen put it in your html\n\n    <script src=\"bundle.js\"></script>\n\nand the entry.js will just run and `require('traverse')` will just work™.\n\nconvert a node module into a browser require-able standalone file\n-----------------------------------------------------------------\n\nUsing `npm` >= 1.0 from the commandz line:\nInstall the `traverse` package locally (into the `node_modules` folder)\n    \n    npm install traverse\n\nUtilize `browserify` to... browserify the package\n\n    npm install -g browserify\n    browserify --require traverse -o bundle.js\n\nLook at the files! There is a new one: `bundle.js`. Now go into HTML land:\n\n    <script src=\"bundle.js\"></script>\n    <script> \n       var traverse = require('traverse');\n    </script>\n\n\nread more\n=========\n\n[browserify: browser-side require() for your node.js](http://substack.net/posts/24ab8c)\n\n[ad-hoc browserify CDN!](http://browserify.nodejitsu.com/)\n\n[jquery-browserify](https://github.com/jmars/jquery-browserify)\n\ninstall\n=======\n\nUsing [npm](http://npmjs.org) just do:\n\n    npm install browserify\n\nto install into your project's node_modules directory, or if you want to use the\ncommand-line tool, install globally with:\n\n    npm install -g browserify\n\ntest\n====\n\nTo run the node tests with tap, do:\n\n    npm test\n\nTo run the [testling](http://testling.com) tests,\ncreate a [browserling](http://browserling.com) account then:\n\n    cd testling\n    ./test.sh\n",
  "_id": "browserify@1.10.4",
  "dist": {
    "shasum": "14b10fe762314326a29c0064b2aef1d449e00e9c"
  },
  "_from": "browserify@https://github.com/itay/node-browserify/tarball/master"
}
